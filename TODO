- public parser interface, plus public factory that returns different parsers
	* method to parse intput, return IInstance

- error handling in LParseParser.cpp, when parsing fails

- lexer: make more readable, state information is a mess atm

- lexer/parser: handle line-break errors (i.e. not enough literals in list).
  	* at the moment we may read into the next line and eat the rule type as literals

- dependency injection light
	* class to instantiate major interfaces via respective methods
		+ Instance
		+ Rule
		+ InstanceToHypergraphConverter
	* all instantiation methods virtual, easy to override
	* have all classes take this instantiator class as a constructor parameter
	
- give meaningful error messages in parser (not just call YYERROR)

- logging?

- use an InstanceToHypergraphConverter interface and classes to convert instances to hypergraphs
	* gets rid of multiple derived Instance classes
	* see dependency injection above

- remove custom Iterator implementation from GroundAspRule, once the relevant thing is in sharp

- IDynAspTuple: move hash struct implementations into cpp file

- get rid of debug.cpp, make some correct debugging code

- order-independant and ordinary hasher as a separate helper class (for IDynAspTuple, etc.)
	* quick call for just two numbers
	* ?? incremental approach that returns intermediate (but completely usable) result at each step

- optimization: certificate where same == true is *exactly* the same as the corresponding model
	* instead of evaluating all the rules again, copy rules_ to rules, and atoms_ to atoms. done.

- in Tuple implementation: split long code blocks into methods
	* private method for: certificate eval, rule check (done!), certificate join, etc...
	* have short, readable code in each method
