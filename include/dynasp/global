#ifndef DYNASP_DYNASP_GLOBAL_H_
#define DYNASP_DYNASP_GLOBAL_H_

// Generic helper definitions for shared library support
#if defined _WIN32 || defined __CYGWIN__
  #define DYNASP_HELPER_IMPORT __declspec(dllimport)
  #define DYNASP_HELPER_EXPORT __declspec(dllexport)
  #define DYNASP_HELPER_LOCAL
#else
  #if __GNUC__ >= 4
    #define DYNASP_HELPER_IMPORT __attribute__ ((visibility ("default")))
    #define DYNASP_HELPER_EXPORT __attribute__ ((visibility ("default")))
    #define DYNASP_HELPER_LOCAL  __attribute__ ((visibility ("hidden")))
  #else
    #define DYNASP_HELPER_IMPORT
    #define DYNASP_HELPER_EXPORT
    #define DYNASP_HELPER_LOCAL
  #endif
#endif

// Now we use the generic helper definitions above to define DYNASP_API.
// DYNASP_API is used for the public API symbols. It either imports or exports
// (or does nothing for a static build)
#ifdef DYNASP_EXPORTS // defined when building (i.e. not using) libdynasp
  #define DYNASP_API DYNASP_HELPER_EXPORT
#else
  #define DYNASP_API DYNASP_HELPER_IMPORT
#endif // DYNASP_EXPORTS
#define DYNASP_LOCAL DYNASP_HELPER_LOCAL













#define DEBUG_INFO


//#define USE_LAME_JOIN
//#define USE_LAME_BASE_JOIN

//REQUIRED FOR CORRECTNESS!
#define BASE_JOIN_BOOST

//#define STRICT_MODE
#define CHECK_CONSENSE


#define USE_SELF_STRICT_DETECTION
//bug if not use USE_RED
//#define USE_EXT_REDUCT_SPEEDUP
//#define USE_CLEVER_COMPRESSION

#define NON_NORM_JOIN

//#define SINGLE_LAYER
//#define MERGE_PASS_TWO_THREE
#define USE_REDUCT_SPEEDUP
#define SECOND_PASS_COMPRESSED
#define THREE_PASSES
#define SEVERAL_PASSES

#define CLEANUP_SOLUTIONS
#define CLEANUP_COUNTER_SOLUTIONS


//#define SINGLE_LAYER
//#define MORE_WORK_JOIN

//actually not really a benefit?!
//#define REVERSE_EXTENSION_POINTER_SET_TYPE

//#define USE_PSEUDO
//TODO: Mit Vorsicht zu genieszen, still Ok?
//#define COMBINE_PSEUDO_PSEUDO_SOLUTIONS
//#define YES_BUT_NO_PSEUDO


//#define TYPICAL_CHILDS 3

//#define VEC_ATOMS_TYPE
#define INT16_ATOMS_TYPE
//#define INT32_ATOMS_TYPE
//#define INT8_ATOMS_TYPE
#define DO_NOT_USE_BITSET
//#define INT32_ATOMS_TYPE

#define CORRECT_WEIGHT_REORGANIZATION


//#define USE_OPTIMIZED_EXTENSION_POINTERS

//#define INT32_ATOMS_TYPE
//#define INT64_ATOMS_TYPE

//TODO: keep in mind that unordered_set == unordered_set could use KeyEqual (i.e. strict flag not compared, although we do not believe this..)
//#define VEC_CERTS_TYPE

//TODO: BUG comparison
//#define VEC_CERT_TYPE

//#define COMBINE_PSEUDO_PSEUDO_SOLUTIONS_EXT

//TODO: do not implement it!
//#define EXTENSION_POINTER_SET_TYPE

//TODO: not needed!
//#define EXTENSION_POINTERS_SET_TYPE
#define EXTENSION_POINTERS_LIST_TYPE






//SANITY checks

#ifdef YES_BUT_NO_PSEUDO
	#define USE_PSEUDO
	#define COMBINE_PSEUDO_PSEUDO_SOLUTIONS
#endif

#ifdef SECOND_PASS_COMPRESSED
#ifndef THREE_PASSES
	#define THREE_PASSES
#endif
#endif

#ifdef THREE_PASSES
#ifndef SEVERAL_PASSES
	#define SEVERAL_PASSES
#endif
#endif

#ifdef INT8_ATOMS_TYPE
	#define INT_ATOMS_TYPE 8
#endif

#ifdef INT16_ATOMS_TYPE
	#define INT_ATOMS_TYPE 16
#endif

#ifdef INT32_ATOMS_TYPE
	#define INT_ATOMS_TYPE 32
#endif

#ifdef INT64_ATOMS_TYPE
	#define INT_ATOMS_TYPE 64
#endif

#ifndef SEVERAL_PASSES
  #undef CLEANUP_SOLUTIONS
#endif

#ifndef INT_ATOMS_TYPE
	#define USE_PSEUDO
#endif

#include <vector>
#include <htd/Globals.hpp>

namespace htd {
typedef std::vector<htd::vertex_t> vertex_container;
class ITreeDecomposition;
}

namespace sharp {
class INodeTupleSetMap;
}








#endif // DYNASP_DYNASP_GLOBAL_H_

